// <auto-generated />
using ASJ.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ASJ.Migrations
{
    [DbContext(typeof(ASJDbContext))]
    [Migration("20180628182044_removeDeathId")]
    partial class removeDeathId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ASJ.Models.DataSupplier", b =>
                {
                    b.Property<int>("DataSupplierId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Fax");

                    b.Property<int?>("InstrumentId");

                    b.Property<string>("Name");

                    b.Property<int?>("OrganizationId");

                    b.Property<int?>("OrganizationYear");

                    b.Property<string>("Phone");

                    b.Property<string>("State");

                    b.Property<string>("Title");

                    b.Property<string>("Zip");

                    b.Property<string>("email");

                    b.HasKey("DataSupplierId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("OrganizationId", "OrganizationYear");

                    b.ToTable("DataSuppliers");
                });

            modelBuilder.Entity("ASJ.Models.Form.DQFUvalue", b =>
                {
                    b.Property<int>("OrganizationID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CURRadmis");

                    b.Property<int?>("CURRadmisfemale");

                    b.Property<int?>("CURRadmismale");

                    b.Property<double?>("CURRadp");

                    b.Property<double?>("CURRadpfemale");

                    b.Property<double?>("CURRadpmale");

                    b.Property<int?>("CURRadultf");

                    b.Property<int?>("CURRadultm");

                    b.Property<int?>("CURRconffemale");

                    b.Property<int?>("CURRconfmale");

                    b.Property<int?>("CURRconfpop");

                    b.Property<int?>("CURRjuvf");

                    b.Property<int?>("CURRjuvm");

                    b.Property<int?>("CURRnconpop");

                    b.Property<int?>("CURRrated");

                    b.Property<int?>("CURRrelease");

                    b.Property<int?>("CURRreleasefemale");

                    b.Property<int?>("CURRreleasemale");

                    b.Property<int?>("PREVadmis");

                    b.Property<int?>("PREVadmisfemale");

                    b.Property<int?>("PREVadmismale");

                    b.Property<double?>("PREVadp");

                    b.Property<double?>("PREVadpfemale");

                    b.Property<double?>("PREVadpmale");

                    b.Property<int?>("PREVadultf");

                    b.Property<int?>("PREVadultm");

                    b.Property<int?>("PREVconffemale");

                    b.Property<int?>("PREVconfmale");

                    b.Property<int?>("PREVconfpop");

                    b.Property<int?>("PREVjuvf");

                    b.Property<int?>("PREVjuvm");

                    b.Property<int?>("PREVnconpop");

                    b.Property<int?>("PREVrated");

                    b.Property<int?>("PREVrelease");

                    b.Property<int?>("PREVreleasefemale");

                    b.Property<int?>("PREVreleasemale");

                    b.HasKey("OrganizationID");

                    b.ToTable("DQFUvalues");
                });

            modelBuilder.Entity("ASJ.Models.Form.Instrument", b =>
                {
                    b.Property<int>("InstrumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DueDate");

                    b.Property<string>("FormNumber");

                    b.Property<string>("IntroText");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("Year");

                    b.HasKey("InstrumentId");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("ASJ.Models.Form.InstrumentOrganizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FrameMembershipId");

                    b.Property<int>("InstrumentId");

                    b.Property<int>("InstrumentYear");

                    b.Property<int>("OrganizationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("FrameMembershipId");

                    b.ToTable("InstrumentOrganizationTypes");
                });

            modelBuilder.Entity("ASJ.Models.Form.InstrumentQuestion", b =>
                {
                    b.Property<int>("InstrumentQuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("InstrumentId");

                    b.Property<int>("OrderNumber");

                    b.Property<int>("Page");

                    b.Property<int?>("QuestionId");

                    b.HasKey("InstrumentQuestionId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("QuestionId");

                    b.ToTable("InstrumentQuestions");
                });

            modelBuilder.Entity("ASJ.Models.Form.LookupQuestionType", b =>
                {
                    b.Property<int>("QuestionTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("QuestionTypeDescription");

                    b.HasKey("QuestionTypeId");

                    b.ToTable("LookupQuestionTypes");
                });

            modelBuilder.Entity("ASJ.Models.Form.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DisplayNumber");

                    b.Property<string>("Indentation");

                    b.Property<string>("IntroText");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<int>("OrderSegment");

                    b.Property<int>("ParentQuestionId");

                    b.Property<int>("ParentResponseId");

                    b.Property<string>("ParentResponseValue");

                    b.Property<string>("QuestionText");

                    b.Property<int?>("QuestionTypeId");

                    b.Property<string>("Variable");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ASJ.Models.Form.QuestionIncludeExclude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BeforeAfter");

                    b.Property<string>("DisplayText");

                    b.Property<string>("IncludeExclude");

                    b.Property<int>("OrderNum");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.ToTable("QuestionIncludesExcludes");
                });

            modelBuilder.Entity("ASJ.Models.Form.QuestionTotalAddend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddendQuestionId");

                    b.Property<int>("TotalQuestionId");

                    b.HasKey("Id");

                    b.ToTable("QuestionTotalAddends");
                });

            modelBuilder.Entity("ASJ.Models.Form.Response", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstrumentId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<int?>("OrganizationId");

                    b.Property<int?>("OrganizationYear");

                    b.Property<int?>("ResponseOptionId");

                    b.Property<string>("ResponseValue");

                    b.Property<string>("ResponseVariable");

                    b.HasKey("ResponseId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("ResponseOptionId");

                    b.HasIndex("OrganizationId", "OrganizationYear");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("ASJ.Models.Form.ResponseOption", b =>
                {
                    b.Property<int>("ResponseOptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrderNumber");

                    b.Property<int?>("QuestionId");

                    b.Property<string>("ResponseOptionText");

                    b.Property<int>("ResponseOptionValue");

                    b.HasKey("ResponseOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ResponseOptions");
                });

            modelBuilder.Entity("ASJ.Models.LookupAgencyStatus", b =>
                {
                    b.Property<int>("AgencyStatusCodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgencyStatusCodeDescription");

                    b.HasKey("AgencyStatusCodeId");

                    b.ToTable("LookupAgencyStatuses");
                });

            modelBuilder.Entity("ASJ.Models.LookupContactType", b =>
                {
                    b.Property<int>("ContactTypeId");

                    b.Property<string>("ContacTypeDescription");

                    b.HasKey("ContactTypeId");

                    b.ToTable("LookupContactType");
                });

            modelBuilder.Entity("ASJ.Models.LookupEvent", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<string>("CodesEventText");

                    b.HasKey("EventId");

                    b.ToTable("LookupEvents");
                });

            modelBuilder.Entity("ASJ.Models.LookupFrameMembership", b =>
                {
                    b.Property<int>("FrameMembershipId");

                    b.Property<string>("FrameMembershipDescription");

                    b.HasKey("FrameMembershipId");

                    b.ToTable("LookupFrameMembership");
                });

            modelBuilder.Entity("ASJ.Models.LookupOrganizationType", b =>
                {
                    b.Property<int>("OrganizationTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnnualFormType");

                    b.Property<string>("Description");

                    b.Property<string>("FormTypeDescription");

                    b.Property<int?>("InstrumentId");

                    b.Property<int>("Year");

                    b.HasKey("OrganizationTypeId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("LookupOrganizationTypes");
                });

            modelBuilder.Entity("ASJ.Models.LookupSpecialCaseCode", b =>
                {
                    b.Property<int>("SpecialCaseCodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SpecialCaseCodeDescripion");

                    b.HasKey("SpecialCaseCodeId");

                    b.ToTable("LookupSpecialCaseCodes");
                });

            modelBuilder.Entity("ASJ.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId");

                    b.Property<int>("Year");

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<int>("InstrumentId");

                    b.Property<bool>("IsPrivate");

                    b.Property<bool>("IsRegional");

                    b.Property<bool>("IsTop150");

                    b.Property<string>("Name");

                    b.Property<int?>("OrganizationFollowupId");

                    b.Property<int?>("OrganizationTypeId");

                    b.Property<string>("PasswordSecure");

                    b.Property<int>("SpecialCaseCode");

                    b.Property<string>("State");

                    b.Property<string>("Url");

                    b.Property<string>("UserName");

                    b.Property<string>("Zip");

                    b.HasKey("OrganizationId", "Year");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("OrganizationFollowupId")
                        .IsUnique()
                        .HasFilter("[OrganizationFollowupId] IS NOT NULL");

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("ASJ.Models.OrganizationContacts", b =>
                {
                    b.Property<int>("OrganizationContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<bool>("AgencyHead");

                    b.Property<bool>("BackupContact");

                    b.Property<string>("City");

                    b.Property<int>("ContactTypeId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("Firstname");

                    b.Property<string>("LastName");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<int?>("OrganizationId");

                    b.Property<int?>("OrganizationYear");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneExt");

                    b.Property<bool>("PrimaryContact");

                    b.Property<string>("Salutation");

                    b.Property<string>("State");

                    b.Property<string>("Title");

                    b.Property<string>("Zip");

                    b.HasKey("OrganizationContactId");

                    b.HasIndex("OrganizationId", "OrganizationYear");

                    b.ToTable("OrganizationContacts");
                });

            modelBuilder.Entity("ASJ.Models.OrganizationEvent", b =>
                {
                    b.Property<int>("OrganizationEventId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("EventDate");

                    b.Property<int>("EventId");

                    b.Property<string>("EventNotes");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<int?>("OrganizationId");

                    b.Property<int?>("OrganizationYear");

                    b.Property<string>("SetBy");

                    b.HasKey("OrganizationEventId");

                    b.HasIndex("EventId");

                    b.HasIndex("OrganizationId", "OrganizationYear");

                    b.ToTable("OrganizationEvents");
                });

            modelBuilder.Entity("ASJ.Models.OrganizationFacility", b =>
                {
                    b.Property<int>("OrganizationFacilityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FacilityAddress");

                    b.Property<string>("FacilityCity");

                    b.Property<string>("FacilityComment");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FacilityNotes");

                    b.Property<string>("FacilityState");

                    b.Property<int>("FacilityStatusCode");

                    b.Property<string>("FacilityZip");

                    b.Property<bool>("Inactive");

                    b.Property<bool>("IsPrivate");

                    b.Property<bool>("IsRegional");

                    b.Property<int?>("OrganizationId");

                    b.Property<int?>("OrganizationYear");

                    b.HasKey("OrganizationFacilityId");

                    b.HasIndex("OrganizationId", "OrganizationYear");

                    b.ToTable("OrganizationFacilities");
                });

            modelBuilder.Entity("ASJ.Models.OrganizationFollowup", b =>
                {
                    b.Property<int>("OrganizationFollowupId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ASJQualityCode");

                    b.Property<int>("ASJStatusCode");

                    b.Property<string>("AgencyStatusCodeBy");

                    b.Property<DateTime?>("AgencyStatusCodeDate");

                    b.Property<int?>("AgencyStatusCodeId");

                    b.Property<string>("AssignedTo");

                    b.Property<string>("AssignedToNR");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DQReady");

                    b.Property<DateTime?>("DQReadyDate");

                    b.Property<DateTime?>("FormCreatedDate");

                    b.Property<DateTime?>("FormModifiedDate");

                    b.Property<int>("MaxAttempts");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<int>("NRMaxAttempts");

                    b.Property<int>("PriorTextReview");

                    b.Property<int>("SummaryQualityCode");

                    b.Property<DateTime?>("SummaryQualityCodeDate");

                    b.Property<int>("SummaryStatusCode");

                    b.Property<string>("SummaryStatusCodeBy");

                    b.Property<DateTime?>("SummaryStatusCodeDate");

                    b.Property<int?>("TextReview");

                    b.Property<string>("TextReviewNotes");

                    b.HasKey("OrganizationFollowupId");

                    b.HasIndex("AgencyStatusCodeId");

                    b.ToTable("OrganizationFollowups");
                });

            modelBuilder.Entity("ASJ.Models.OrganizationNotes", b =>
                {
                    b.Property<int>("OrganizationNoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<string>("Note");

                    b.Property<int?>("OrganizationId");

                    b.Property<int?>("OrganizationYear");

                    b.HasKey("OrganizationNoteId");

                    b.HasIndex("OrganizationId", "OrganizationYear");

                    b.ToTable("OrganizationNotes");
                });

            modelBuilder.Entity("ASJ.Models.OrganizationQCDetails", b =>
                {
                    b.Property<int>("OrganizationQcDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CYrange");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("FirstAppeared");

                    b.Property<int?>("InstrumentId");

                    b.Property<int>("Location");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<int?>("OrganizationId");

                    b.Property<int?>("OrganizationYear");

                    b.Property<string>("PYrange");

                    b.Property<string>("QCDetails");

                    b.HasKey("OrganizationQcDetailsId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("OrganizationId", "OrganizationYear");

                    b.ToTable("OrganizationQCDetails");
                });

            modelBuilder.Entity("ASJ.Models.PDF.PDFAnnualASJ", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AIAN");

                    b.Property<string>("AIAN_estimate");

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Fax");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("STUBholdsquex");

                    b.Property<string>("State");

                    b.Property<string>("Title");

                    b.Property<string>("Zip");

                    b.Property<string>("adltjuv");

                    b.Property<string>("adltjuv_estimate");

                    b.Property<string>("admis");

                    b.Property<string>("admis_estimate");

                    b.Property<string>("admisfemale");

                    b.Property<string>("admisfemale_estimate");

                    b.Property<string>("admismale");

                    b.Property<string>("admismale_estimate");

                    b.Property<string>("adp");

                    b.Property<string>("adp_estimate");

                    b.Property<string>("adpfemale");

                    b.Property<string>("adpfemale_estimate");

                    b.Property<string>("adpmale");

                    b.Property<string>("adpmale_estimate");

                    b.Property<string>("adultf");

                    b.Property<string>("adultf_estimate");

                    b.Property<string>("adultm");

                    b.Property<string>("adultm_estimate");

                    b.Property<string>("altwork");

                    b.Property<string>("altwork_estimate");

                    b.Property<string>("asian");

                    b.Property<string>("asian_estimate");

                    b.Property<string>("bia");

                    b.Property<string>("bia_estimate");

                    b.Property<string>("black");

                    b.Property<string>("black_estimate");

                    b.Property<string>("bop");

                    b.Property<string>("bop_estimate");

                    b.Property<string>("commsrv");

                    b.Property<string>("commsrv_estimate");

                    b.Property<string>("confpop");

                    b.Property<string>("confpop_estimate");

                    b.Property<string>("conv");

                    b.Property<string>("conv_estimate");

                    b.Property<string>("corrstaff");

                    b.Property<string>("corrstaff_estimate");

                    b.Property<string>("corrstafffemale");

                    b.Property<string>("corrstafffemale_estimate");

                    b.Property<string>("corrstaffmale");

                    b.Property<string>("corrstaffmale_estimate");

                    b.Property<string>("dayreport");

                    b.Property<string>("dayreport_estimate");

                    b.Property<string>("email");

                    b.Property<string>("emonitor");

                    b.Property<string>("emonitor_estimate");

                    b.Property<string>("felony");

                    b.Property<string>("felony_estimate");

                    b.Property<string>("form_status");

                    b.Property<string>("hisp");

                    b.Property<string>("hisp_estimate");

                    b.Property<string>("homedetn");

                    b.Property<string>("homedetn_estimate");

                    b.Property<string>("ice");

                    b.Property<string>("ice_estimate");

                    b.Property<string>("instatejail");

                    b.Property<string>("instatejail_estimate");

                    b.Property<string>("instatepris");

                    b.Property<string>("instatepris_estimate");

                    b.Property<string>("juvf");

                    b.Property<string>("juvf_estimate");

                    b.Property<string>("juvm");

                    b.Property<string>("juvm_estimate");

                    b.Property<string>("marshals");

                    b.Property<string>("marshals_estimate");

                    b.Property<string>("misd");

                    b.Property<string>("misd_estimate");

                    b.Property<string>("nconfpop");

                    b.Property<string>("nconfpop_estimate");

                    b.Property<string>("nhopi");

                    b.Property<string>("nhopi_estimate");

                    b.Property<string>("noncitz");

                    b.Property<string>("noncitz_estimate");

                    b.Property<string>("nonconfd");

                    b.Property<string>("nonconfd_estimate");

                    b.Property<string>("otherfed");

                    b.Property<string>("otherfed_estimate");

                    b.Property<string>("otherfedspec");

                    b.Property<string>("otherholdtot");

                    b.Property<string>("otherholdtot_estimate");

                    b.Property<string>("otheroff");

                    b.Property<string>("otheroff_estimate");

                    b.Property<string>("otheroffspec");

                    b.Property<string>("otherrace");

                    b.Property<string>("otherrace_estimate");

                    b.Property<string>("otherracespec");

                    b.Property<string>("otherstaff");

                    b.Property<string>("otherstaff_estimate");

                    b.Property<string>("otherstafffemale");

                    b.Property<string>("otherstafffemale_estimate");

                    b.Property<string>("otherstaffmale");

                    b.Property<string>("otherstaffmale_estimate");

                    b.Property<string>("otrnonconf");

                    b.Property<string>("otrnonconf_estimate");

                    b.Property<string>("otrnonconfs");

                    b.Property<string>("outstatejail");

                    b.Property<string>("outstatejail_estimate");

                    b.Property<string>("outstatepris");

                    b.Property<string>("outstatepris_estimate");

                    b.Property<string>("peakdate");

                    b.Property<string>("peakpop");

                    b.Property<string>("peakpop_estimate");

                    b.Property<string>("pretrial");

                    b.Property<string>("pretrial_estimate");

                    b.Property<string>("racedk");

                    b.Property<string>("racedk_estimate");

                    b.Property<string>("racetotal");

                    b.Property<string>("racetotal_estimate");

                    b.Property<string>("rated");

                    b.Property<string>("rated_estimate");

                    b.Property<string>("release");

                    b.Property<string>("release_estimate");

                    b.Property<string>("releasefemale");

                    b.Property<string>("releasefemale_estimate");

                    b.Property<string>("releasemale");

                    b.Property<string>("releasemale_estimate");

                    b.Property<string>("totalstaff");

                    b.Property<string>("totalstaff_estimate");

                    b.Property<string>("totconvstatus");

                    b.Property<string>("totconvstatus_estimate");

                    b.Property<string>("totgender");

                    b.Property<string>("totgender_estimate");

                    b.Property<string>("totoff");

                    b.Property<string>("totoff_estimate");

                    b.Property<string>("totpop");

                    b.Property<string>("totpop_estimate");

                    b.Property<string>("treatment");

                    b.Property<string>("treatment_estimate");

                    b.Property<string>("tribal");

                    b.Property<string>("tribal_estimate");

                    b.Property<string>("tworace");

                    b.Property<string>("tworace_estimate");

                    b.Property<string>("unconv");

                    b.Property<string>("unconv_estimate");

                    b.Property<string>("week");

                    b.Property<string>("weekn");

                    b.Property<string>("weekn_estimate");

                    b.Property<string>("white");

                    b.Property<string>("white_estimate");

                    b.HasKey("OrganizationId");

                    b.ToTable("asj_annual_2018");
                });

            modelBuilder.Entity("ASJ.Models.PDF.PDFCognitive", b =>
                {
                    b.Property<int>("organizationid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("conf17f");

                    b.Property<string>("conf17f_estimate");

                    b.Property<string>("conf17m");

                    b.Property<string>("conf17m_estimate");

                    b.Property<string>("conf17tot");

                    b.Property<string>("conf17tot_estimate");

                    b.Property<string>("conf1824f");

                    b.Property<string>("conf1824f_estimate");

                    b.Property<string>("conf1824m");

                    b.Property<string>("conf1824m_estimate");

                    b.Property<string>("conf1824tot");

                    b.Property<string>("conf1824tot_estimate");

                    b.Property<string>("conf2534f");

                    b.Property<string>("conf2534f_estimate");

                    b.Property<string>("conf2534m");

                    b.Property<string>("conf2534m_estimate");

                    b.Property<string>("conf2534tot");

                    b.Property<string>("conf2534tot_estimate");

                    b.Property<string>("conf3544f");

                    b.Property<string>("conf3544f_estimate");

                    b.Property<string>("conf3544m");

                    b.Property<string>("conf3544m_estimate");

                    b.Property<string>("conf3544tot");

                    b.Property<string>("conf3544tot_estimate");

                    b.Property<string>("conf4554f");

                    b.Property<string>("conf4554f_estimate");

                    b.Property<string>("conf4554m");

                    b.Property<string>("conf4554m_estimate");

                    b.Property<string>("conf4554tot");

                    b.Property<string>("conf4554tot_estimate");

                    b.Property<string>("conf54f");

                    b.Property<string>("conf54f_estimate");

                    b.Property<string>("conf54m");

                    b.Property<string>("conf54m_estimate");

                    b.Property<string>("conf54tot");

                    b.Property<string>("conf54tot_estimate");

                    b.Property<string>("confbench");

                    b.Property<string>("confbench_estimate");

                    b.Property<string>("confconditional");

                    b.Property<string>("confconditional_estimate");

                    b.Property<string>("confdriv");

                    b.Property<string>("confdriv_estimate");

                    b.Property<string>("confdrug");

                    b.Property<string>("confdrug_estimate");

                    b.Property<string>("confmedtreatment");

                    b.Property<string>("confmedtreatment_estimate");

                    b.Property<string>("confnotknown");

                    b.Property<string>("confnotknown_estimate");

                    b.Property<string>("confother");

                    b.Property<string>("confother_estimate");

                    b.Property<string>("confparole");

                    b.Property<string>("confparole_estimate");

                    b.Property<string>("confpop");

                    b.Property<string>("confpop_estimate");

                    b.Property<string>("confpretrial");

                    b.Property<string>("confpretrial_estimate");

                    b.Property<string>("confprobation");

                    b.Property<string>("confprobation_estimate");

                    b.Property<string>("confprop");

                    b.Property<string>("confprop_estimate");

                    b.Property<string>("confviol");

                    b.Property<string>("confviol_estimate");

                    b.Property<string>("confweap");

                    b.Property<string>("confweap_estimate");

                    b.Property<string>("foreignborn");

                    b.Property<string>("foreignborn_estimate");

                    b.Property<string>("foreignbornconv");

                    b.Property<string>("foreignbornconv_estimate");

                    b.Property<string>("foreignborntotal");

                    b.Property<string>("foreignborntotal_estimate");

                    b.Property<string>("foreignbornunconv");

                    b.Property<string>("foreignbornunconv_estimate");

                    b.Property<string>("foreignbornzero");

                    b.Property<string>("introconfdemographics");

                    b.Property<string>("newadmis");

                    b.Property<string>("newadmis_estimate");

                    b.Property<string>("newadmisscreen");

                    b.Property<string>("newadmisscreen_estimate");

                    b.Property<string>("newadmisscreenpos");

                    b.Property<string>("newadmisscreenpos_estimate");

                    b.Property<string>("newadmisscreenposunique");

                    b.Property<string>("newadmisscreenposunique_estimate");

                    b.Property<string>("newadmistreat");

                    b.Property<string>("newadmistreat_estimate");

                    b.Property<string>("newadmistreatunique");

                    b.Property<string>("newadmistreatunique_estimate");

                    b.Property<string>("nonuscitconv");

                    b.Property<string>("nonuscitconv_estimate");

                    b.Property<string>("nonuscitcount");

                    b.Property<string>("nonuscitcount_estimate");

                    b.Property<string>("nonuscittotal");

                    b.Property<string>("nonuscittotal_estimate");

                    b.Property<string>("nonuscitunconv");

                    b.Property<string>("nonuscitunconv_estimate");

                    b.Property<string>("nonuscitzero");

                    b.Property<string>("opemeddisorder");

                    b.Property<string>("opiacute");

                    b.Property<string>("opibehav");

                    b.Property<string>("opichronic");

                    b.Property<string>("opilink");

                    b.Property<string>("opimedprescription");

                    b.Property<string>("opimedwithdrawal");

                    b.Property<string>("opioverdose");

                    b.Property<string>("opireversal");

                    b.Property<string>("opiscreen");

                    b.Property<string>("opiurine");

                    b.Property<string>("sectioniitext");

                    b.Property<string>("totconftotf");

                    b.Property<string>("totconftotf_estimate");

                    b.Property<string>("totconftotgrand");

                    b.Property<string>("totconftotgrand_estimate");

                    b.Property<string>("totconftotm");

                    b.Property<string>("totconftotm_estimate");

                    b.Property<string>("totoff");

                    b.Property<string>("totoff_estimate");

                    b.Property<string>("usborn");

                    b.Property<string>("usborn_estimate");

                    b.Property<string>("uscitcount");

                    b.Property<string>("uscitcount_estimate");

                    b.HasKey("organizationid");

                    b.ToTable("pivot_responses_cogtest");
                });

            modelBuilder.Entity("ASJ.Models.RoleGroup", b =>
                {
                    b.Property<int>("RoleGroupID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleGroupName");

                    b.HasKey("RoleGroupID");

                    b.ToTable("RoleGroups");
                });

            modelBuilder.Entity("ASJ.Models.RoleGroupRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("RoleGroupID");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleGroupID");

                    b.ToTable("RoleGroupRoles");
                });

            modelBuilder.Entity("ASJ.Models.UserRoleGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("RoleGroupID");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleGroupID");

                    b.ToTable("UserRoleGroups");
                });

            modelBuilder.Entity("ASJ.Models.DataSupplier", b =>
                {
                    b.HasOne("ASJ.Models.Form.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId");

                    b.HasOne("ASJ.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId", "OrganizationYear");
                });

            modelBuilder.Entity("ASJ.Models.Form.InstrumentOrganizationType", b =>
                {
                    b.HasOne("ASJ.Models.LookupFrameMembership", "FrameMembership")
                        .WithMany()
                        .HasForeignKey("FrameMembershipId");
                });

            modelBuilder.Entity("ASJ.Models.Form.InstrumentQuestion", b =>
                {
                    b.HasOne("ASJ.Models.Form.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId");

                    b.HasOne("ASJ.Models.Form.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("ASJ.Models.Form.Question", b =>
                {
                    b.HasOne("ASJ.Models.Form.LookupQuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId");
                });

            modelBuilder.Entity("ASJ.Models.Form.Response", b =>
                {
                    b.HasOne("ASJ.Models.Form.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ASJ.Models.Form.ResponseOption", "ResponseOption")
                        .WithMany()
                        .HasForeignKey("ResponseOptionId");

                    b.HasOne("ASJ.Models.Organization", "Organization")
                        .WithMany("Responses")
                        .HasForeignKey("OrganizationId", "OrganizationYear");
                });

            modelBuilder.Entity("ASJ.Models.Form.ResponseOption", b =>
                {
                    b.HasOne("ASJ.Models.Form.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("ASJ.Models.LookupOrganizationType", b =>
                {
                    b.HasOne("ASJ.Models.Form.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId");
                });

            modelBuilder.Entity("ASJ.Models.Organization", b =>
                {
                    b.HasOne("ASJ.Models.Form.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ASJ.Models.OrganizationFollowup", "OrganizationFollowup")
                        .WithOne("Organization")
                        .HasForeignKey("ASJ.Models.Organization", "OrganizationFollowupId");

                    b.HasOne("ASJ.Models.LookupOrganizationType", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeId");
                });

            modelBuilder.Entity("ASJ.Models.OrganizationContacts", b =>
                {
                    b.HasOne("ASJ.Models.Organization", "Organization")
                        .WithMany("OrganizationContacts")
                        .HasForeignKey("OrganizationId", "OrganizationYear");
                });

            modelBuilder.Entity("ASJ.Models.OrganizationEvent", b =>
                {
                    b.HasOne("ASJ.Models.LookupEvent", "LookupEvent")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ASJ.Models.Organization", "Organization")
                        .WithMany("OrganizationEvents")
                        .HasForeignKey("OrganizationId", "OrganizationYear");
                });

            modelBuilder.Entity("ASJ.Models.OrganizationFacility", b =>
                {
                    b.HasOne("ASJ.Models.Organization", "Organization")
                        .WithMany("OrganizationFacility")
                        .HasForeignKey("OrganizationId", "OrganizationYear");
                });

            modelBuilder.Entity("ASJ.Models.OrganizationFollowup", b =>
                {
                    b.HasOne("ASJ.Models.LookupAgencyStatus", "AgencyStatusCode")
                        .WithMany()
                        .HasForeignKey("AgencyStatusCodeId");
                });

            modelBuilder.Entity("ASJ.Models.OrganizationNotes", b =>
                {
                    b.HasOne("ASJ.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId", "OrganizationYear");
                });

            modelBuilder.Entity("ASJ.Models.OrganizationQCDetails", b =>
                {
                    b.HasOne("ASJ.Models.Form.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId");

                    b.HasOne("ASJ.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId", "OrganizationYear");
                });

            modelBuilder.Entity("ASJ.Models.RoleGroupRoles", b =>
                {
                    b.HasOne("ASJ.Models.RoleGroup", "RoleGroup")
                        .WithMany()
                        .HasForeignKey("RoleGroupID");
                });

            modelBuilder.Entity("ASJ.Models.UserRoleGroups", b =>
                {
                    b.HasOne("ASJ.Models.RoleGroup", "RoleGroup")
                        .WithMany()
                        .HasForeignKey("RoleGroupID");
                });
#pragma warning restore 612, 618
        }
    }
}
